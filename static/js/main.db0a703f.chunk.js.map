{"version":3,"sources":["components/Header.jsx","components/Content.jsx","components/Footer.jsx","components/InfoPage.jsx","components/HighlightableText.jsx","components/ToggleButton.jsx","components/TypingGame.jsx","components/Playground.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Header","props","onClick","label","className","type","Content","content","Footer","href","icon","faLinkedin","size","style","color","faGithub","faEnvelope","InfoPage","src","alt","HighlightableText","children","start","end","left","substring","highlighted","right","ToggleButton","state","positionIsLeft","this","leftText","rightText","setState","width","textAlign","order","overflowX","maxWidth","fontSize","height","cx","cy","r","stroke","strokeWidth","fill","React","Component","TypingGame","isPlaying","index","text","words","input","timerOn","timerStart","timerEnd","isCapitalized","normalText","split","length","trimLeft","includes","checkCorrect","trimRight","Date","now","capitalizedWords","map","word","charAt","toUpperCase","slice","capitalize","capitalizedText","join","refreshedState","faRedo","value","onChange","event","target","Math","floor","Playground","MOOD","SERIOUS","FUN","Object","freeze","App","mood","toggleMood","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.db0a703f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../css/Header.css';\n\nexport default function Header(props) {\n  const { onClick, label } = props;\n\n  return (\n    <div className=\"header-box\">\n      <button\n        className=\"toggle-button\"\n        type=\"button\"\n        onClick={onClick}\n      >\n        {label}\n        {' >'}\n      </button>\n    </div>\n  );\n}\n\nHeader.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  label: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../css/Content.css';\n\nexport default function Content(props) {\n  const { content } = props;\n\n  return (\n    <div className=\"content-box\">\n      {content}\n    </div>\n  );\n}\n\nContent.propTypes = {\n  content: PropTypes.node.isRequired,\n};\n","import React from 'react';\nimport '../css/Footer.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLinkedin, faGithub } from '@fortawesome/free-brands-svg-icons';\nimport { faEnvelope } from '@fortawesome/free-solid-svg-icons';\n\nexport default function Footer() {\n  return (\n    <div className=\"footer-box\">\n      <div className=\"footer-item\">\n        <a\n          href=\"https://www.linkedin.com/in/wei-liang-yan-ab0299185/\"\n        >\n          <FontAwesomeIcon\n            icon={faLinkedin}\n            size=\"2x\"\n            style={{\n              color: 'white',\n            }}\n          />\n        </a>\n      </div>\n      <div className=\"footer-item\">\n        <a\n          href=\"https://www.github.com/uberSaiyan\"\n        >\n          <FontAwesomeIcon\n            icon={faGithub}\n            size=\"2x\"\n            style={{\n              color: 'white',\n            }}\n          />\n        </a>\n      </div>\n      <div className=\"footer-item\">\n        <a href=\"mailto:yanwl.note@gmail.com\">\n          <FontAwesomeIcon\n            icon={faEnvelope}\n            size=\"2x\"\n            style={{\n              color: 'white',\n            }}\n          />\n        </a>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport '../css/InfoPage.css';\n\nexport default function InfoPage() {\n  return (\n    <>\n      <img\n        className=\"profile-pic\"\n        src=\"https://image.shutterstock.com/z/stock-vector-work-in-progress-sign-270781412.jpg\"\n        alt=\"profile-pic\"\n      />\n      <h1\n        className=\"name-text\"\n      >\n        Yan Wei Liang\n      </h1>\n      <p\n        className=\"info-text\"\n      >\n        Computer Science Undergraduate\n      </p>\n      <p\n        className=\"info-text\"\n      >\n        Passionate about software\n      </p>\n    </>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function HighlightableText(props) {\n  const {\n    children, start, end, color,\n  } = props;\n  const left = children.substring(0, start);\n  const highlighted = children.substring(start, end + 1);\n  const right = children.substring(end + 1);\n\n  return (\n    <div>\n      <span>\n        {left}\n      </span>\n      <span\n        style={{\n          color,\n        }}\n      >\n        {highlighted}\n      </span>\n      <span>\n        {right}\n      </span>\n    </div>\n  );\n}\n\nHighlightableText.propTypes = {\n  children: PropTypes.string.isRequired,\n  start: PropTypes.number.isRequired,\n  end: PropTypes.number.isRequired,\n  color: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport '../css/ToggleButton.css';\nimport PropTypes from 'prop-types';\n\nexport default class ToggleButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      positionIsLeft: true,\n    };\n  }\n\n  render() {\n    const { onClick, leftText, rightText } = this.props;\n    const { positionIsLeft } = this.state;\n\n    return (\n      <button\n        className=\"slider-button\"\n        type=\"button\"\n        onClick={() => {\n          this.setState({ positionIsLeft: !positionIsLeft });\n          onClick();\n        }}\n      >\n        <span\n          style={{\n            width: '100%',\n            textAlign: 'center',\n            order: positionIsLeft ? 2 : 1,\n            overflowX: 'hidden',\n            maxWidth: '100px',\n            fontSize: '12px',\n          }}\n        >\n          {positionIsLeft ? leftText : rightText}\n        </span>\n        <svg\n          height=\"16\"\n          width=\"16\"\n          style={{\n            order: positionIsLeft ? 1 : 2,\n          }}\n        >\n          <circle\n            cx=\"8\"\n            cy=\"8\"\n            r=\"8\"\n            stroke=\"black\"\n            strokeWidth=\"1\"\n            fill=\"silver\"\n          />\n        </svg>\n        {/* <button\n          type=\"button\"\n          disabled\n          style={{\n            borderRadius: '50%',\n            backgroundColor: 'black',\n            borderColor: 'black',\n            order: positionIsLeft ? 1 : 2,\n          }}\n        /> */}\n      </button>\n    );\n  }\n}\n\nToggleButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  leftText: PropTypes.string.isRequired,\n  rightText: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport '../css/TypingGame.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faRedo } from '@fortawesome/free-solid-svg-icons';\nimport HighlightableText from './HighlightableText';\nimport ToggleButton from './ToggleButton';\n\nfunction capitalize(word) {\n  return word.charAt(0).toUpperCase() + word.slice(1);\n}\n\nexport default class TypingGame extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      isPlaying: true,\n      index: 0,\n      text: '',\n      words: [],\n      input: '',\n      start: 0,\n      end: 0,\n      timerOn: false,\n      timerStart: 0,\n      timerEnd: 0,\n      isCapitalized: false,\n      normalText: '',\n    };\n  }\n\n  componentDidMount() {\n    const text = 'The quick brown fox jumps over the lazy dog.';\n    const words = text.split(' ');\n    const end = words[0].length;\n    this.setState({\n      text,\n      words,\n      end,\n      normalText: text,\n    });\n  }\n\n  componentDidUpdate() {\n    const { input } = this.state;\n    if (input.trimLeft().includes(' ')) {\n      this.checkCorrect();\n    }\n  }\n\n  refreshedState() {\n    const { words } = this.state;\n    return {\n      ...this.state,\n      isPlaying: true,\n      index: 0,\n      input: '',\n      start: 0,\n      end: words[0].length,\n      timerOn: false,\n      timerStart: 0,\n      timerEnd: 0,\n    };\n  }\n\n  checkCorrect() {\n    const {\n      index, words, input, end,\n    } = this.state;\n    const isCorrect = input.trimRight() === words[index];\n    if (isCorrect) {\n      if (index === (words.length - 1)) {\n        // Don't advance index, clear input and end timer\n        this.setState({\n          isPlaying: false,\n          input: '',\n          timerEnd: Date.now(),\n        });\n      } else {\n        // Clear input and advance index\n        this.setState({\n          index: index + 1,\n          input: '',\n          start: end + 1,\n          end: end + 1 + words[index + 1].length,\n        });\n      }\n    }\n  }\n\n  render() {\n    const {\n      isPlaying, text, words, input, start, end, timerOn, timerStart, timerEnd, isCapitalized,\n      normalText,\n    } = this.state;\n\n    return (\n      <div className=\"game-box\">\n        <div className=\"reset-button-box\">\n          <ToggleButton\n            leftText=\"Capitalize\"\n            rightText=\"Normal\"\n            onClick={() => {\n              if (!isCapitalized) {\n                const capitalizedWords = words.map((word) => capitalize(word));\n                const capitalizedText = capitalizedWords.join(' ');\n                this.setState({\n                  isCapitalized: !isCapitalized,\n                  words: capitalizedWords,\n                  text: capitalizedText,\n                });\n              } else {\n                this.setState({\n                  isCapitalized: !isCapitalized,\n                  text: normalText,\n                  words: normalText.split(' '),\n                });\n              }\n            }}\n          />\n          <button\n            className=\"reset-button\"\n            type=\"button\"\n            onClick={() => this.setState(this.refreshedState())}\n          >\n            <FontAwesomeIcon\n              icon={faRedo}\n            />\n          </button>\n        </div>\n        {isPlaying\n          ? (\n            <>\n              <p className=\"text\">\n                <HighlightableText\n                  start={start}\n                  end={end}\n                  color=\"red\"\n                >\n                  {text}\n                </HighlightableText>\n              </p>\n              <div className=\"input-box\">\n                <input\n                  type=\"text\"\n                  value={input}\n                  onChange={(event) => {\n                    if (!timerOn) {\n                      this.setState({\n                        timerOn: true,\n                        timerStart: Date.now(),\n                        input: event.target.value,\n                      });\n                    } else {\n                      this.setState({\n                        input: event.target.value,\n                      });\n                    }\n                  }}\n                />\n              </div>\n            </>\n          )\n          : (\n            <>\n              <p className=\"text\">\n                {text}\n              </p>\n              <div className=\"stats-text-box\">\n                <span>\n                  Time taken:\n                  {' '}\n                  {(timerEnd - timerStart) / 1000}\n                  {' seconds'}\n                </span>\n                <span>\n                  Word count:\n                  {' '}\n                  {words.length}\n                </span>\n                <span>\n                  Words per minute:\n                  {' '}\n                  {Math.floor((60 / ((timerEnd - timerStart) / 1000)) * words.length)}\n                </span>\n              </div>\n            </>\n          )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport TypingGame from './TypingGame';\n\nexport default function Playground() {\n  return (\n    <TypingGame />\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Content from './components/Content';\nimport Footer from './components/Footer';\nimport InfoPage from './components/InfoPage';\nimport Playground from './components/Playground';\n\nconst MOOD = {\n  SERIOUS: 0,\n  FUN: 1,\n};\nObject.freeze(MOOD);\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      mood: MOOD.SERIOUS,\n    };\n  }\n\n  toggleMood() {\n    const { mood } = this.state;\n    if (mood === MOOD.SERIOUS) {\n      this.setState({\n        mood: MOOD.FUN,\n      });\n    } else {\n      this.setState({\n        mood: MOOD.SERIOUS,\n      });\n    }\n  }\n\n  render() {\n    const { mood } = this.state;\n    const content = mood === MOOD.SERIOUS ? <InfoPage /> : <Playground />;\n    const label = mood === MOOD.SERIOUS ? 'Playground' : 'About';\n\n    return (\n      <div className=\"layout\">\n        <div className=\"header\">\n          <Header onClick={() => this.toggleMood()} label={label} />\n        </div>\n        <div className=\"content\">\n          <Content content={content} />\n        </div>\n        <div className=\"footer\">\n          <Footer />\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'typeface-abel';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}