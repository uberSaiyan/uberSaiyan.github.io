{"version":3,"sources":["components/Header.jsx","components/Content.jsx","components/Footer.jsx","components/InfoPage.jsx","components/Playground.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Header","props","onClick","label","className","type","Content","content","Footer","href","icon","faLinkedin","size","style","color","faGithub","faEnvelope","InfoPage","src","alt","Playground","MOOD","SERIOUS","FUN","Object","freeze","App","state","mood","this","setState","toggleMood","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kWAIe,SAASA,EAAOC,GAAQ,IAC7BC,EAAmBD,EAAnBC,QAASC,EAAUF,EAAVE,MAEjB,OACE,yBAAKC,UAAU,cACb,4BACEA,UAAU,gBACVC,KAAK,SACLH,QAASA,GAERC,EACA,IANH,M,MCLS,SAASG,EAAQL,GAAQ,IAC9BM,EAAYN,EAAZM,QAER,OACE,yBAAKH,UAAU,eACZG,G,gCCHQ,SAASC,IACtB,OACE,yBAAKJ,UAAU,cACb,yBAAKA,UAAU,eACb,uBAEEK,KAAK,6BAEL,kBAAC,IAAD,CACEC,KAAMC,IACNC,KAAK,KACLC,MAAO,CACLC,MAAO,aAKf,yBAAKV,UAAU,eACb,uBAEEK,KAAK,2BAEL,kBAAC,IAAD,CACEC,KAAMK,IACNH,KAAK,KACLC,MAAO,CACLC,MAAO,aAKf,yBAAKV,UAAU,eACb,uBAAGK,KAAK,+BACN,kBAAC,IAAD,CACEC,KAAMM,IACNJ,KAAK,KACLC,MAAO,CACLC,MAAO,c,MCxCN,SAASG,IACtB,OACE,oCACE,yBACEb,UAAU,cACVc,IAAI,oFACJC,IAAI,gBAEN,wBACEf,UAAU,aADZ,iBAKA,uBACEA,UAAU,aADZ,kCAKA,uBACEA,UAAU,aADZ,8BCnBS,SAASgB,IACtB,OACE,gDCIJ,IAAMC,EAAO,CACXC,QAAS,EACTC,IAAK,GAEPC,OAAOC,OAAOJ,G,IAEOK,E,YACnB,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,KAAMP,EAAKC,SAHD,E,0EAQKO,KAAKF,MAAdC,OACKP,EAAKC,QAChBO,KAAKC,SAAS,CACZF,KAAMP,EAAKE,MAGbM,KAAKC,SAAS,CACZF,KAAMP,EAAKC,Y,+BAKP,IAAD,OACCM,EAASC,KAAKF,MAAdC,KACFrB,EAAUqB,IAASP,EAAKC,QAAU,kBAAC,EAAD,MAAe,kBAACF,EAAD,MACjDjB,EAAQyB,IAASP,EAAKC,QAAU,aAAe,QAErD,OACE,yBAAKlB,UAAU,UACb,yBAAKA,UAAU,UACb,kBAAC,EAAD,CAAQF,QAAS,kBAAM,EAAK6B,cAAc5B,MAAOA,KAEnD,yBAAKC,UAAU,WACb,kBAAC,EAAD,CAASG,QAASA,KAEpB,yBAAKH,UAAU,UACb,kBAAC,EAAD,Y,GAnCuB4B,IAAMC,WCFnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b552efb1.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../css/Header.css';\n\nexport default function Header(props) {\n  const { onClick, label } = props;\n\n  return (\n    <div className=\"header-box\">\n      <button\n        className=\"toggle-button\"\n        type=\"button\"\n        onClick={onClick}\n      >\n        {label}\n        {' '}\n        &gt;\n      </button>\n    </div>\n  );\n}\n\nHeader.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  label: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../css/Content.css';\n\nexport default function Content(props) {\n  const { content } = props;\n\n  return (\n    <div className=\"content-box\">\n      {content}\n    </div>\n  );\n}\n\nContent.propTypes = {\n  content: PropTypes.node.isRequired,\n};\n","import React from 'react';\nimport '../css/Footer.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLinkedin, faGithub } from '@fortawesome/free-brands-svg-icons';\nimport { faEnvelope } from '@fortawesome/free-solid-svg-icons';\n\nexport default function Footer() {\n  return (\n    <div className=\"footer-box\">\n      <div className=\"footer-item\">\n        <a\n          // href=\"https://www.linkedin.com/in/wei-liang-yan-ab0299185/\"\n          href=\"https://www.linkedin.com/\"\n        >\n          <FontAwesomeIcon\n            icon={faLinkedin}\n            size=\"2x\"\n            style={{\n              color: 'white',\n            }}\n          />\n        </a>\n      </div>\n      <div className=\"footer-item\">\n        <a\n          // href=\"https://www.github.com/uberSaiyan\"\n          href=\"https://www.github.com/\"\n        >\n          <FontAwesomeIcon\n            icon={faGithub}\n            size=\"2x\"\n            style={{\n              color: 'white',\n            }}\n          />\n        </a>\n      </div>\n      <div className=\"footer-item\">\n        <a href=\"mailto:yanwl.note@gmail.com\">\n          <FontAwesomeIcon\n            icon={faEnvelope}\n            size=\"2x\"\n            style={{\n              color: 'white',\n            }}\n          />\n        </a>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport '../css/InfoPage.css';\n\nexport default function InfoPage() {\n  return (\n    <>\n      <img\n        className=\"profile-pic\"\n        src=\"https://image.shutterstock.com/z/stock-vector-work-in-progress-sign-270781412.jpg\"\n        alt=\"profile-pic\"\n      />\n      <h1\n        className=\"name-text\"\n      >\n        Yan Wei Liang\n      </h1>\n      <p\n        className=\"info-text\"\n      >\n        Computer Science Undergraduate\n      </p>\n      <p\n        className=\"info-text\"\n      >\n        Passionate about software\n      </p>\n    </>\n  );\n}\n","import React from 'react';\n\nexport default function Playground() {\n  return (\n    <h1>WORK IN PROGRESS</h1>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Content from './components/Content';\nimport Footer from './components/Footer';\nimport InfoPage from './components/InfoPage';\nimport Playground from './components/Playground';\n\nconst MOOD = {\n  SERIOUS: 0,\n  FUN: 1,\n};\nObject.freeze(MOOD);\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      mood: MOOD.SERIOUS,\n    };\n  }\n\n  toggleMood() {\n    const { mood } = this.state;\n    if (mood === MOOD.SERIOUS) {\n      this.setState({\n        mood: MOOD.FUN,\n      });\n    } else {\n      this.setState({\n        mood: MOOD.SERIOUS,\n      });\n    }\n  }\n\n  render() {\n    const { mood } = this.state;\n    const content = mood === MOOD.SERIOUS ? <InfoPage /> : <Playground />;\n    const label = mood === MOOD.SERIOUS ? 'Playground' : 'About';\n\n    return (\n      <div className=\"layout\">\n        <div className=\"header\">\n          <Header onClick={() => this.toggleMood()} label={label} />\n        </div>\n        <div className=\"content\">\n          <Content content={content} />\n        </div>\n        <div className=\"footer\">\n          <Footer />\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'typeface-abel';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}